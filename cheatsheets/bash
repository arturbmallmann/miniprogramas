bash (shell script)

Quebras de linha ou ';' são equivalentes, recomendo sempre o uso do espaço após ';'

Laços de repetição:

for i in LISTA
do
	...
done

while [ COND ]
do
	...
done



Condicionais:

if [COND]; then AÇÃO;else AÇÃO; fi
if [COND]
	then
		AÇÃO
	else
		AÇÃO
fi

case compara as oções com a string A
case $A in
	\-t*) AÇÃO ;;
	\--help) AÇÃO ;;
esac



Expressões de comparação:

( EXPRESSION )		valor de EXPRESSION (true false)
! EXPRESSION 		inverso de Expression
EXP1 -a EXP2		and
EXP1 -o EXP2		or

Strings:
-n STRING			tamanho de STRING != 0
-z STRING			tamanho de STRING == 0
STRING1 = STRING2	igualdade
STRING1 != STRING2	diferente

Integers:
I1 -eq I2				=
I2 -ne I2				!=
I1 -ge I2				>=
I1 -gt I2				>
I1 -le I2				<=
I1 -lt I2				<

Arquivos:
FILE1 -ef FILE2			mesmo arquivo (dispositivo e inode)
FILE1 -nt FILE2			FILE1 mais recente que FILE2
FILE1 -ot FILE2			FILE1 mais antigas que FILE2
-f FILE					FILE existe e é arquivo
-d FILE					existe e é pasta
-r FILE					AArquivo pode ser lido
-w FILE					Arquivo pode ser modificado



Manipulação de variáveis:

Atribuição:
VAR=Valor
Exportação de valores(global):
export VAR=valor
exportar o conexto de um script a chamado:
. ./script



Funções:
chamadas de funções:

FUNC args

declaração e definição de funções:

function FUNC{
...
}


Manipulação de argumentos:
$@	 			todos os argumentos
$0 $1 ... $n	argumentos individualmente




Manipulação de Strings:
${VAR:inicio:fim}
Ler valores: $VAR ou ${VAR}
concatenação: VAR = $VAR1$VAR2
concatenar saída de script: `comando`
execução de script guardado em string: $(VAR)


Leitura de Arquivos linha a linha com read:
#!/bin/bash
file=/etc/resolv.conf
while IFS= read -r line
do
        # echo line is stored in $line
	echo $line
done < "$file"




Variáveis importantes:

IFS:
Internal Field Separator
valores padrões: <space><tab><newline>
Exemplo de uso:
file=/etc/resolv.conf
while IFS=' ' read -r f1 f2
do
	echo "field # 1 : $f1 ==> field #2 : $f2"
done < "$file"
IFS tbm afeta a saída dos parametros(Ex SCRIPT PARAM1 PARAM2 PARAM3):
IFS='|'
echo "$@"	saída: PARAM1 PARAM2 PARAM3
echo $*	saída: PARAM1 PARAM2 PARAM3
echo "$*"	Saída: PARAM1|PARAM2|PARAM3

DISPLAY:
Variável responsável por dizer à aplicações gráficas qual instancia de servidor gráfico devem rodar:
echo $DISPLAY
:0.0
exemplo da saída ao conectar via ssh com túnel X11 ativo(ssh -X):
localhost:10.0
mudar o valor para a instancia 1
DISPLAY=:1

HOME:
Variável responsável por mostrar o diretório raiz do usuário, exemplo da saída para: echo $HOME
/home/usuario

PWD:
Variável responsável por mostrar o diretório atual no qual o usuário se encontra: echo $PWD
/home/usuario/Documentos



Redirecionamento de saídas:
Direcionar entrada e saída padrão.
Entrada padrão, é o stream no qual o programa recebe os caracteres "digitados" conheciada como stdin (exemplo de funções que a leem: readline, read, getc, getchar, scanf, <<cin etc)
Saída padrão, na verdade são duas: a entrada stout e stderr. A primeira é a que geralmente usamos para printar no terminal: (printf, print, cout>> etc). A segunda se trata da saída de erros, usa-se os mesmos comandos mas se explicita qual saída sera usada.

[comando] executável ou script a ser executado

Direcionar entrada:
[comando] < arquivo_a_ser_lido

Direcionar saída:
[comando] > arquivo_a_ser_escrito

Direcionar entrada e saída:
[comando] < arquivo_a_ser_lido > arquivo_a_ser_escrito

Direcionar saída de erro:
[comando] 2> arquivo_a_ser_escrito

Direcionar saída principal e erro:
[comando] &> arquivo_a_ser_escrito
ligar a saida do comando1 na entrada do comando2:
comando1 | comando2




fontes:

man [
man bash
https://bash.cyberciti.biz/guide/While_loop
https://bash.cyberciti.biz/guide/$IFS
https://stackoverflow.com/questions/3427872/whats-the-difference-between-and-in-bash
https://ryanstutorials.net/bash-scripting-tutorial/bash-functions.php
https://stackoverflow.com/questions/26675681/how-to-check-the-exit-status-using-an-if-statement
